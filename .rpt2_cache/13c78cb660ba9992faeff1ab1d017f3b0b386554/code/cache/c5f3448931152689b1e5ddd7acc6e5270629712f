{"code":"import * as tslib_1 from \"tslib\";\r\nimport { tidy, util } from '@tensorflow/tfjs-core';\r\nimport { getNodeNameAndIndex, getTensor } from '../operations/executors/utils';\r\nimport { executeOp } from '../operations/operation_executor';\r\nimport { ExecutionContext } from './execution_context';\r\nvar GraphExecutor = (function () {\r\n    function GraphExecutor(graph) {\r\n        this.graph = graph;\r\n        this.compiledOrder = [];\r\n        this._weightMap = {};\r\n        this.placeholders = graph.placeholders;\r\n        this._outputs = graph.outputs;\r\n        this.compile();\r\n    }\r\n    Object.defineProperty(GraphExecutor.prototype, \"weightMap\", {\r\n        get: function () {\r\n            return this._weightMap;\r\n        },\r\n        set: function (weightMap) {\r\n            var weightIds = Object.keys(weightMap).map(function (key) { return weightMap[key].map(function (tensor) { return tensor.id; }); });\r\n            this.weightIds = [].concat.apply([], weightIds);\r\n            this._weightMap = weightMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GraphExecutor.prototype, \"inputs\", {\r\n        get: function () {\r\n            return this.placeholders.map(function (node) {\r\n                return {\r\n                    name: node.name,\r\n                    shape: node.params['shape'] ? node.params['shape'].value :\r\n                        undefined,\r\n                    dtype: node.params['dtype'] ? node.params['dtype'].value :\r\n                        undefined\r\n                };\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GraphExecutor.prototype, \"outputs\", {\r\n        get: function () {\r\n            return this._outputs.map(function (node) {\r\n                return {\r\n                    name: node.name,\r\n                    shape: node.params['shape'] ? node.params['shape'].value :\r\n                        undefined,\r\n                    dtype: node.params['dtype'] ? node.params['dtype'].value :\r\n                        undefined\r\n                };\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GraphExecutor.prototype, \"inputNodes\", {\r\n        get: function () {\r\n            return this.placeholders.map(function (node) { return node.name; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GraphExecutor.prototype, \"outputNodes\", {\r\n        get: function () {\r\n            return this.outputs.map(function (node) { return node.name; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GraphExecutor.prototype, \"isControlFlowModel\", {\r\n        get: function () {\r\n            return this.graph.withControlFlow;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    GraphExecutor.prototype.compile = function () {\r\n        if (this.graph.withControlFlow) {\r\n            return;\r\n        }\r\n        var stack = this.graph.inputs.slice();\r\n        var visited = {};\r\n        while (stack.length > 0) {\r\n            var node = stack.pop();\r\n            visited[node.name] = true;\r\n            this.compiledOrder.push(node);\r\n            node.children.forEach(function (childNode) {\r\n                if (!visited[childNode.name] && childNode.inputNames.every(function (name) {\r\n                    var nodeName = getNodeNameAndIndex(name)[0];\r\n                    return visited[nodeName];\r\n                })) {\r\n                    stack.push(childNode);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    GraphExecutor.prototype.execute = function (inputs, outputs) {\r\n        var _this = this;\r\n        this.checkInput(inputs);\r\n        this.checkInputShapeAndType(inputs);\r\n        var result = tidy(function () {\r\n            var context = new ExecutionContext(_this._weightMap);\r\n            var tensors = _this.compiledOrder.reduce(function (map, node) {\r\n                map[node.name] = executeOp(node, map, context);\r\n                return map;\r\n            }, tslib_1.__assign({}, _this.weightMap, inputs));\r\n            return _this.findOutputs(tensors, context, outputs);\r\n        });\r\n        return result;\r\n    };\r\n    GraphExecutor.prototype.executeAsync = function (inputs, outputs) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var context, tensors, results, outputIds, inputIdArray, inputIds;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.checkInput(inputs);\r\n                        this.checkInputShapeAndType(inputs);\r\n                        context = new ExecutionContext(this._weightMap);\r\n                        return [4, this.executeWithControlFlow(inputs, context)];\r\n                    case 1:\r\n                        tensors = _a.sent();\r\n                        results = this.findOutputs(tensors, context, outputs);\r\n                        outputIds = Object.keys(results).map(function (key) { return results[key].id; });\r\n                        inputIdArray = Object.keys(inputs).map(function (key) { return inputs[key].map(function (input) { return input.id; }); });\r\n                        inputIds = [].concat.apply([], inputIdArray);\r\n                        Object.keys(tensors).forEach(function (key) {\r\n                            var tensorArray = tensors[key];\r\n                            tensorArray.forEach(function (tensor) {\r\n                                if (tensor && outputIds.indexOf(tensor.id) === -1 &&\r\n                                    inputIds.indexOf(tensor.id) === -1 &&\r\n                                    _this.weightIds.indexOf(tensor.id) === -1) {\r\n                                    tensor.dispose();\r\n                                }\r\n                            });\r\n                        });\r\n                        return [2, results];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    GraphExecutor.prototype.executeWithControlFlow = function (inputs, context) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var stack, tensorMap, added, item, tensors, nodeName, _a, _b;\r\n            return tslib_1.__generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        stack = this.graph.inputs.map(function (node) {\r\n                            return { node: node, contexts: context.currentContext };\r\n                        });\r\n                        tensorMap = tslib_1.__assign({}, this.weightMap, inputs);\r\n                        added = {};\r\n                        _c.label = 1;\r\n                    case 1:\r\n                        if (!(stack.length > 0)) return [3, 3];\r\n                        item = stack.pop();\r\n                        context.currentContext = item.contexts;\r\n                        tensors = executeOp(item.node, tensorMap, context);\r\n                        nodeName = getNodeNameAndIndex(item.node.name, context)[0];\r\n                        _a = tensorMap;\r\n                        _b = nodeName;\r\n                        return [4, tensors];\r\n                    case 2:\r\n                        _a[_b] = _c.sent();\r\n                        item.node.children.forEach(function (childNode) {\r\n                            var nodeName = getNodeNameAndIndex(childNode.name, context)[0];\r\n                            if (!added[nodeName]) {\r\n                                if (childNode.op === 'merge') {\r\n                                    if (childNode.inputNames.some(function (name) {\r\n                                        return !!getTensor(name, tensorMap, context);\r\n                                    })) {\r\n                                        added[nodeName] = true;\r\n                                        stack.push({ contexts: context.currentContext, node: childNode });\r\n                                    }\r\n                                }\r\n                                else if (childNode.inputNames.every(function (name) {\r\n                                    return !!getTensor(name, tensorMap, context);\r\n                                })) {\r\n                                    added[nodeName] = true;\r\n                                    stack.push({ contexts: context.currentContext, node: childNode });\r\n                                }\r\n                            }\r\n                        });\r\n                        return [3, 1];\r\n                    case 3: return [2, tensorMap];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    GraphExecutor.prototype.findOutputs = function (tensorMap, context, outputs) {\r\n        if (outputs && !(outputs instanceof Array)) {\r\n            outputs = [outputs];\r\n        }\r\n        var requestedOutputs = (outputs || this.graph.outputs.map(function (node) { return node.name; }));\r\n        return requestedOutputs.reduce(function (map, name) {\r\n            map[name] = getTensor(name, tensorMap, context);\r\n            return map;\r\n        }, {});\r\n    };\r\n    GraphExecutor.prototype.dispose = function () {\r\n        var _this = this;\r\n        Object.keys(this.weightMap)\r\n            .forEach(function (key) { return _this.weightMap[key].forEach(function (tensor) { return tensor.dispose(); }); });\r\n    };\r\n    GraphExecutor.prototype.checkInputShapeAndType = function (inputs) {\r\n        this.placeholders.forEach(function (node) {\r\n            var input = inputs[node.name][0];\r\n            if (node.params['shape'] && node.params['shape'].value) {\r\n                var shape_1 = node.params['shape'].value;\r\n                var match = shape_1.length === input.shape.length &&\r\n                    input.shape.every(function (dim, index) { return shape_1[index] === -1 || shape_1[index] === dim; });\r\n                util.assert(match, \"The shape of dict['\" + node.name + \"'] provided in model.execute(dict) must be [\" + shape_1 + \"], but was [\" + input.shape + \"]\");\r\n            }\r\n            if (node.params['dtype'] && node.params['dtype'].value) {\r\n                util.assert(input.dtype === node.params['dtype'].value, \"The dtype of dict['\" + node.name + \"'] provided in model.execute(dict) must be \" + node.params['dtype'].value + \", but was \" + input.dtype);\r\n            }\r\n        });\r\n    };\r\n    GraphExecutor.prototype.checkInput = function (inputs) {\r\n        var _this = this;\r\n        var inputKeys = Object.keys(inputs);\r\n        var missing = [];\r\n        var extra = [];\r\n        this.inputNodes.forEach(function (name) {\r\n            if (inputKeys.indexOf(name) === -1)\r\n                missing.push(name);\r\n        });\r\n        inputKeys.forEach(function (name) {\r\n            if (_this.inputNodes.indexOf(name) === -1)\r\n                extra.push(name);\r\n        });\r\n        if (missing.length > 0) {\r\n            throw new Error(\"The dict provided in model.execute(dict) has the keys \" +\r\n                (\"[\" + inputKeys + \"], but is missing the required keys: [\" + missing + \"].\"));\r\n        }\r\n        if (extra.length > 0) {\r\n            throw new Error(\"The dict provided in model.execute(dict) has \" +\r\n                (\"unused keys: [\" + extra + \"]. Please provide only the following keys: \") +\r\n                (\"[\" + this.inputNodes + \"].\"));\r\n        }\r\n    };\r\n    return GraphExecutor;\r\n}());\r\nexport { GraphExecutor };\r\n//# sourceMappingURL=graph_executor.js.map","map":"{\"version\":3,\"file\":\"graph_executor.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/executor/graph_executor.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/Stir/Downloads/tfjs-converter-master/executor/graph_executor.d.ts","text":"import { NamedTensorMap, NamedTensorsMap, TensorInfo } from '../data/types';\r\nimport { Graph } from '../operations/types';\r\nexport declare class GraphExecutor {\r\n    private graph;\r\n    private compiledOrder;\r\n    private _weightMap;\r\n    private weightIds;\r\n    private placeholders;\r\n    private _outputs;\r\n    weightMap: NamedTensorsMap;\r\n    readonly inputs: TensorInfo[];\r\n    readonly outputs: TensorInfo[];\r\n    readonly inputNodes: string[];\r\n    readonly outputNodes: string[];\r\n    constructor(graph: Graph);\r\n    readonly isControlFlowModel: boolean;\r\n    private compile();\r\n    execute(inputs: NamedTensorsMap, outputs?: string | string[]): NamedTensorMap;\r\n    executeAsync(inputs: NamedTensorsMap, outputs?: string | string[]): Promise<NamedTensorMap>;\r\n    private executeWithControlFlow(inputs, context);\r\n    private findOutputs(tensorMap, context, outputs?);\r\n    dispose(): void;\r\n    private checkInputShapeAndType(inputs);\r\n    private checkInput(inputs);\r\n}\r\n"}}
