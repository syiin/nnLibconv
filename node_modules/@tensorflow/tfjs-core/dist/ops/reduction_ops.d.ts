import { Tensor } from '../tensor';
import { TensorLike } from '../types';
export declare class ReductionOps {
    static logSumExp<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static sum<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static mean<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static min<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static max<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static argMin<T extends Tensor>(x: Tensor | TensorLike, axis?: number): T;
    static argMax<T extends Tensor>(x: Tensor | TensorLike, axis?: number): T;
    static all<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static any<T extends Tensor>(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): T;
    static moments(x: Tensor | TensorLike, axis?: number | number[], keepDims?: boolean): {
        mean: Tensor;
        variance: Tensor;
    };
}
